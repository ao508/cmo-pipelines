/*
 * Copyright (c) 2017 Memorial Sloan-Kettering Cancer Center.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS
 * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder
 * is on an "as is" basis, and Memorial Sloan-Kettering Cancer Center has no
 * obligations to provide maintenance, support, updates, enhancements or
 * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be
 * liable to any party for direct, indirect, special, incidental or
 * consequential damages, including lost profits, arising out of the use of this
 * software and its documentation, even if Memorial Sloan-Kettering Cancer
 * Center has been advised of the possibility of such damage.
 */

/*
 * This file is part of cBioPortal CMO-Pipelines.
 *
 * cBioPortal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.cbioportal.cmo.pipelines.cvr.masterlist;

import java.util.*;
import org.apache.log4j.Logger;
import org.cbioportal.cmo.pipelines.cvr.CVRUtilities;
import org.cbioportal.cmo.pipelines.cvr.model.CVRRequeueRecord;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.RequestEntity;
import org.springframework.web.client.RestTemplate;
import org.springframework.util.LinkedMultiValueMap;

/**
 *
 * @author Manda Wilson
 */
public class CVRMasterListProcessor implements ItemProcessor<String, CVRRequeueRecord> {

    @Value("${dmp.server_name}")
    private String dmpServerName;
    
    @Value("${dmp.tokens.requeue.impact}")
    private String dmpRequeue;
    
    @Value("#{jobParameters[sessionId]}")
    private String sessionId;
    
    Logger log = Logger.getLogger(CVRMasterListProcessor.class);

    @Autowired
    private CVRUtilities cvrUtilities;

    @Override
    public CVRRequeueRecord process(String sample) throws Exception {
        CVRRequeueRecord requeueData = requeue(sample);
        if (requeueData.getResult() != 1) { // 1 is success
            log.warn("Failed to requeue '" + sample + "'");
            return requeueData;
        }
        return null;  // on success return null, this item does not need further processing
    }

    private CVRRequeueRecord requeue(String sample) {
        log.info("Requeueing '" + sample + "'");
        String dmpRequeueUrl = dmpServerName + dmpRequeue + "/" + sessionId + "/" + sample;
        RestTemplate restTemplate = new RestTemplate();
        HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = getRequestEntity();
        ResponseEntity<CVRRequeueRecord> responseEntity;
        try {
            responseEntity = restTemplate.exchange(dmpRequeueUrl, HttpMethod.GET, requestEntity, CVRRequeueRecord.class);
        } catch (org.springframework.web.client.RestClientException e) {
            String message = "Error getting requeuing sample: " + sample;
            log.error(message);
            return new CVRRequeueRecord("This record was generated by " + CVRMasterListProcessor.class,
                "Error requeuing sample (request failed to return result)",
                0,
                sample);
        }
        return responseEntity.getBody();
    }
    
    private HttpEntity getRequestEntity() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        return new HttpEntity<Object>(headers);
    }
    
}
